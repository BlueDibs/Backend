// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firebaseId   String   @unique
  avatarPath   String?
  email        String   @unique
  username     String   @unique
  bio          String?
  followers    User[]   @relation("UserFollows", fields: [followersIDs], references: [id])
  followersIDs String[] @db.ObjectId
  following    User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs String[] @db.ObjectId
  Posts        Post[]   @relation("owner")

  PostLikedIDs String[]  @db.ObjectId
  PostsLiked   Post[]    @relation("postLiked", fields: [PostLikedIDs], references: [id])
  Comment      Comment[]

  shares Int   @default(10000000)
  equity Float @default(0)

  balance Float @default(0)

  price Float @default(1)

  // holdings
  Holdings Holding[] @relation("bought")
  Sold     Holding[] @relation("sold")

  // transactions
  SellTransactions Transaction[] @relation("sellTransactions")
  BuyTRansactions  Transaction[] @relation("buyTransactions")

  @@unique([firebaseId, email, username])
}

model Holding {
  ownership_id String @id @default(auto()) @map("_id") @db.ObjectId

  buyerUser User   @relation("bought", fields: [buyer_id], references: [id])
  buyer_id  String @db.ObjectId

  price Float

  amount Float

  sellerUser User   @relation("sold", fields: [seller_id], references: [id])
  seller_id  String @db.ObjectId

  created DateTime @default(now())

  @@unique([buyer_id, seller_id])
}

// the transaction is of amount shares from seller to buyer
model Transaction {
  txn_id String @id @default(auto()) @map("_id") @db.ObjectId

  buyerUser User   @relation("sellTransactions", fields: [buyer_id], references: [id])
  buyer_id  String @db.ObjectId

  price Float @default(0)

  amount Float

  sellerUser User   @relation("buyTransactions", fields: [seller_id], references: [id])
  seller_id  String @db.ObjectId

  created DateTime @default(now())
}

model Post {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  path    String
  caption String?
  likes   Int     @default(0)
  User    User    @relation("owner", fields: [userId], references: [id])

  UserLikedIDs String[] @db.ObjectId
  UsersLiked   User[]   @relation("postLiked", fields: [UserLikedIDs], references: [id])

  userId  String    @db.ObjectId
  created DateTime
  Comment Comment[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  Post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  content String

  created DateTime
}
